*** EVALUATION ***
ANSI-C/cC++ Compiler for HC12 V-5.0.40 Build 10020, Jan 21 2010

    1:  /*****************************************************
    2:        start12.c - standard startup code
    3:     The startup code may be optimized to special user requests
    4:   ----------------------------------------------------
    5:     Copyright (c) Metrowerks, Basel, Switzerland
    6:                 All rights reserved
    7:                    Do not modify!
    8:  
    9:  Note: ROM libraries are not implemented in this startup code
   10:  Note: C++ destructors of global objects are NOT yet supported in the HIWARE Object File Format.
   11:        To use this feature, please build your application with the ELF object file format.
   12:   *****************************************************/
   13:  
   14:  #include "hidef.h"
   15:  #include "start12.h"
   16:  
   17:  /* Macros to control how the startup code handles the COP: */
   18:  /* #define _DO_FEED_COP_  : do feed the COP  */
   19:  /* #define _DO_ENABLE_COP_: do enable the COP  */
   20:  /* #define _DO_DISABLE_COP_: disable the COP */
   21:  /* Without defining any of these, the startup code does NOT handle the COP */
   22:  
   23:  #pragma DATA_SEG __NEAR_SEG STARTUP_DATA /* _startupData can be accessed using 16 bit accesses. This is needed because it contains the stack top, and without stack, far data cannot be accessed */
   24:  struct _tagStartup _startupData;  /*   read-only: */
   25:                                    /*   _startupData is allocated in ROM and */
   26:                                    /*   initialized by the linker */
   27:  #pragma DATA_SEG DEFAULT
   28:  #if defined(FAR_DATA)
   29:  #include "non_bank.sgm"
   30:  /* the init function must be in non banked memory if banked variables are used */
   31:  /* because _SET_PAGE is called, which may change any page register. */
   32:  
   33:  #ifdef __cplusplus
   34:    extern "C"
   35:  #endif
   36:  void _SET_PAGE(void);             /* the inline assembler needs a prototype */
   37:                                    /* this is a runtime routine with a special */
   38:                                    /* calling convention, dont use it in c code! */
   39:  static void Init(void);
   40:  static void Fini(void);
   41:  #else
   42:  #include "default.sgm"
   43:  #if defined( __BANKED__) || defined(__LARGE__)
   44:  static void __far Init(void);
   45:  static void __far Fini(void);
   46:  #endif /* defined( __BANKED__) || defined(__LARGE__) */
   47:  #endif /* FAR_DATA */
   48:  
   49:  
   50:  /* define value and bits for Windef Register */
   51:  #ifdef HC812A4
   52:  #define WINDEF (*(volatile unsigned char*) 0x37)
   53:  #if defined( __BANKED__) || defined(__LARGE__) || defined(__PPAGE__)
   54:  #define __ENABLE_PPAGE__ 0x40
   55:  #else
   56:  #define __ENABLE_PPAGE__ 0x0
   57:  #endif
   58:  #if defined(__DPAGE__)
   59:  #define __ENABLE_DPAGE__ 0x80
   60:  #else
   61:  #define __ENABLE_DPAGE__ 0x0
   62:  #endif
   63:  #if defined(__EPAGE__)
   64:  #define __ENABLE_EPAGE__ 0x20
   65:  #else
   66:  #define __ENABLE_EPAGE__ 0x0
   67:  #endif
   68:  #endif  /* HC812A4 */
   69:  
   70:  
   71:  #if defined(_DO_FEED_COP_)
   72:  #define __FEED_COP_IN_HLI()  } __asm movb #0x55, _COP_RST_ADR; __asm movb #0xAA, _COP_RST_ADR; __asm {
   73:  #else
   74:  #define __FEED_COP_IN_HLI() /* do nothing */
   75:  #endif
   76:  
   77:  #if !defined(FAR_DATA) && (defined( __BANKED__) || defined(__LARGE__))
   78:  static void __far Init(void)
   79:  #else
   80:  static void Init(void)
   81:  #endif
   82:   {
*** EVALUATION ***

Function: Init
Source  : \\psf\Home\Documents\HSE\Vorlesungen\Echtzeitsysteme\Examples\CAN\HAL-Target\Start12.c
Options : -Cc -D_HCS12 -D__NO_FLOAT__ -D_HCS12_SERIALMON -Env"GENPATH=\\psf\Home\Documents\HSE\Vorlesungen\Echtzeitsysteme\Examples\CAN\IDE-Target;\\psf\Home\Documents\HSE\Vorlesungen\Echtzeitsysteme\Examples\CAN\IDE-Target\bin;\\psf\Home\Documents\HSE\Vorlesungen\Echtzeitsysteme\Examples\CAN\IDE-Target\prm;\\psf\Home\Documents\HSE\Vorlesungen\Echtzeitsysteme\Examples\CAN\IDE-Target\cmd;\\psf\Home\Documents\HSE\Vorlesungen\Echtzeitsysteme\Examples\CAN\IDE-Target\Sources;C:\Programme\Freescale\CodeWarrior for S12(X) V5.0\lib\HC12c\lib;C:\Programme\Freescale\CodeWarrior for S12(X) V5.0\lib\HC12c\src;\\psf\Home\Documents\HSE\Vorlesungen\Echtzeitsysteme\Examples\CAN\HAL-Target;\\psf\Home\Documents\HSE\Vorlesungen\Echtzeitsysteme\Examples\CAN\Application;C:\Programme\Freescale\CodeWarrior for S12(X) V5.0\lib\HC12c\include" -Env"LIBPATH=C:\Programme\Freescale\CodeWarrior for S12(X) V5.0\lib\HC12c\include" -EnvOBJPATH=\\psf\Home\Documents\HSE\Vorlesungen\Echtzeitsysteme\Examples\CAN\IDE-Target\bin -EnvTEXTPATH=\\psf\Home\Documents\HSE\Vorlesungen\Echtzeitsysteme\Examples\CAN\IDE-Target\bin -Lasm=%n.lst -Ms -ObjN=\\psf\Home\Documents\HSE\Vorlesungen\Echtzeitsysteme\Examples\CAN\IDE-Target\can-example_Data\Monitor\ObjectCode\Start12.c.o

   83:  /* purpose:     1) zero out RAM-areas where data is allocated   */
   84:  /*              2) copy initialization data from ROM to RAM     */
   85:  /*              3) call global constructors in C++              */
   86:  /*   called from: _Startup, LibInits                            */
   87:     __asm {
   88:  ZeroOut:
   89:  #if defined(__HIWARE_OBJECT_FILE_FORMAT__) && defined(__LARGE__)
   90:               LDX   _startupData.pZeroOut:1  ; in the large memory model in the HIWARE format, pZeroOut is a 24 bit pointer
   91:  #else
   92:               LDX   _startupData.pZeroOut    ; *pZeroOut
  0000 fe0000       [3]     LDX   _startupData:7
   93:  #endif
   94:               LDY   _startupData.nofZeroOuts ; nofZeroOuts
  0003 fd0000       [3]     LDY   _startupData:5
   95:               BEQ   CopyDown                 ; if nothing to zero out
  0006 270e         [3/1]   BEQ   *+16 ;abs = 0016
   96:  
   97:  NextZeroOut: PSHY                           ; save nofZeroOuts
  0008 35           [2]     PSHY  
   98:  #ifdef FAR_DATA
   99:               LDAB  1,X+                     ; load page of destination address
  100:               LDY   2,X+                     ; load offset of destination address
  101:               __PIC_JSR(_SET_PAGE)           ; sets the page in the correct page register
  102:  #else   /* FAR_DATA */
  103:               LDY   2,X+                     ; start address and advance *pZeroOut (X = X+4)
  0009 ed31         [3]     LDY   2,X+
  104:  #endif  /* FAR_DATA */
  105:               LDD   2,X+                     ; byte count
  000b ec31         [3]     LDD   2,X+
  106:  #ifdef  __OPTIMIZE_FOR_SIZE__               /* -os, default */
  107:  NextWord:    CLR   1,Y+                     ; clear memory byte
  000d 6970         [2]     CLR   1,Y+
  108:               __FEED_COP_IN_HLI()            ; feed the COP if necessary /*lint !e505 !e522 asm code */
  109:               DBNE  D, NextWord              ; dec byte count
  000f 0434fb       [3]     DBNE  D,*-2 ;abs = 000d
  110:  #else
  111:               LSRD                           ; /2 and save bit 0 in the carry
  112:               PSHX
  113:               LDX   #0
  114:  LoopClrW:    STX   2,Y+                     ; Word-Clear
  115:               __FEED_COP_IN_HLI()            ; feed the COP if necessary /*lint !e505 !e522 asm code */
  116:               DBNE  D, LoopClrW
  117:               PULX
  118:               BCC   LastClr                  ; handle last byte
  119:               CLR   1,Y+
  120:  LastClr:
  121:  #endif
  122:               PULY                           ; restore nofZeroOuts
  0012 31           [3]     PULY  
  123:               DEY                            ; dec nofZeroOuts
  0013 03           [1]     DEY   
  124:               BNE  NextZeroOut
  0014 26f2         [3/1]   BNE   *-12 ;abs = 0008
  125:  CopyDown:
  126:  #ifdef __ELF_OBJECT_FILE_FORMAT__
  127:               LDX   _startupData.toCopyDownBeg ; load address of copy down desc.
  0016 fe0000       [3]     LDX   _startupData:9
  128:  #else
  129:               LDX   _startupData.toCopyDownBeg:2 ; load address of copy down desc.
  130:  #endif
  131:  NextBlock:
  132:               LDD   2,X+                     ; size of init-data -> D
  0019 ec31         [3]     LDD   2,X+
  133:               BEQ   funcInits                ; end of copy down desc.
  001b 270b         [3/1]   BEQ   *+13 ;abs = 0028
  134:  #ifdef FAR_DATA
  135:               PSHD                           ; save counter
  136:               LDAB  1,X+                     ; load destination page
  137:               LDY   2,X+                     ; destination address
  138:               __PIC_JSR(_SET_PAGE)           ; sets the destinations page register
  139:               PULD                           ; restore counter
  140:  #else  /* FAR_DATA */
  141:               LDY   2,X+                     ; load destination address
  001d ed31         [3]     LDY   2,X+
  142:  #endif /* FAR_DATA */
  143:  
  144:  #ifdef  __OPTIMIZE_FOR_SIZE__               /* -os, default */
  145:  Copy:        MOVB  1,X+,1,Y+                ; move a byte from ROM to the data area
  001f 180a3070     [5]     MOVB  1,X+,1,Y+
  146:               __FEED_COP_IN_HLI()            ; feed the COP if necessary /*lint !e505 !e522 asm code */
  147:               DBNE  D,Copy                   ; copy-byte loop
  0023 0434f9       [3]     DBNE  D,*-4 ;abs = 001f
  148:  #else
  149:               LSRD                           ; /2 and save bit 0 in the carry
  150:  Copy:        MOVW  2,X+,2,Y+                ; move a word from ROM to the data area
  151:               __FEED_COP_IN_HLI()            ; feed the COP if necessary /*lint !e505 !e522 asm code */
  152:               DBNE  D,Copy                   ; copy-word loop
  153:               BCC   NextBlock                ; handle last byte?
  154:               MOVB  1,X+,1,Y+                ; copy the last byte
  155:  #endif
  156:               BRA   NextBlock
  0026 20f1         [3]     BRA   *-13 ;abs = 0019
  157:  funcInits:                                  ; call of global construtors is only in c++ necessary
  158:  #if defined(__cplusplus)
  159:  #if defined(__ELF_OBJECT_FILE_FORMAT__)
  160:  #if defined( __BANKED__) || defined(__LARGE__)
  161:               LDY   _startupData.nofInitBodies; load number of cpp.
  162:               BEQ   done                     ; if cppcount == 0, goto done
  163:               LDX   _startupData.initBodies  ; load address of first module to initialize
  164:  nextInit:
  165:               LEAX   3,X                     ; increment to next init
  166:               PSHX                           ; save address of next function to initialize
  167:               PSHY                           ; save cpp counter
  168:               CALL  [-3,X]                   ; use double indirect call to load the page register also
  169:               PULY                           ; restore cpp counter
  170:               PULX                           ; restore actual address
  171:               DEY                            ; decrement cpp counter
  172:               BNE    nextInit
  173:  #else  /* defined( __BANKED__) || defined(__LARGE__) */
  174:  
  175:               LDD   _startupData.nofInitBodies; load number of cpp.
  176:               BEQ   done                     ; if cppcount == 0, goto done
  177:               LDX   _startupData.initBodies  ; load address of first module to initialize
  178:  nextInit:
  179:               LDY   2,X+                     ; load address of first module to initialize
  180:               PSHD
  181:               PSHX                           ; save actual address
  182:               JSR   0,Y                      ; call initialization function
  183:               PULX                           ; restore actual address
  184:               PULD                           ; restore cpp counter
  185:               DBNE D, nextInit
  186:  #endif /* defined( __BANKED__) || defined(__LARGE__) */
  187:  #else /* __ELF_OBJECT_FILE_FORMAT__  */
  188:               LDX   _startupData.mInits      ; load address of first module to initialize
  189:  #if defined( __BANKED__) || defined(__LARGE__)
  190:  nextInit:    LDY   3,X+                     ; load address of initialization function
  191:               BEQ   done                     ; stop when address  == 0
  192:                                              ; in common environments the offset of a function is never 0, so this test could be avoided
  193:  #ifdef __InitFunctionsMayHaveOffset0__
  194:               BRCLR -1,X, done, 0xff         ; stop when address  == 0
  195:  #endif  /* __InitFunctionsMayHaveOffset0__ */
  196:               PSHX                           ; save address of next function to initialize
  197:               CALL  [-3,X]                   ; use double indirect call to load the page register also
  198:  #else  /* defined( __BANKED__) || defined(__LARGE__) */
  199:  nextInit:
  200:               LDY   2,X+                     ; load address of first module to initialize
  201:               BEQ   done                     ; stop when address of function == 0
  202:               PSHX                           ; save actual address
  203:               JSR   0,Y                      ; call initialization function
  204:  #endif /* defined( __BANKED__) || defined(__LARGE__) */
  205:               PULX                           ; restore actual address
  206:               BRA   nextInit
  207:  #endif  /* __ELF_OBJECT_FILE_FORMAT__  */
  208:  done:
  209:  #endif /* __cplusplus */
  210:     }
  211:  }
  0028 3d           [5]     RTS   
  212:  
  213:  #if defined( __ELF_OBJECT_FILE_FORMAT__) && defined(__cplusplus )
  214:  
  215:  #if !defined(FAR_DATA) && (defined( __BANKED__) || defined(__LARGE__))
  216:  static void __far Fini(void)
  217:  #else
  218:  static void Fini(void)
  219:  #endif
  220:  {
  221:  /* purpose:     1) call global destructors in C++ */
  222:     __asm {
  223:  #if defined( __BANKED__) || defined(__LARGE__)
  224:  
  225:               LDY   _startupData.nofFiniBodies; load number of cpp.
  226:               BEQ   done                     ; if cppcount == 0, goto done
  227:               LDX   _startupData.finiBodies  ; load address of first module to finalize
  228:  nextInit2:
  229:               LEAX   3,X                     ; increment to next init
  230:               PSHX                           ; save address of next function to finalize
  231:               PSHY                           ; save cpp counter
  232:               CALL  [-3,X]                   ; use double indirect call to load the page register also
  233:               PULY                           ; restore cpp counter
  234:               PULX                           ; restore actual address
  235:               DEY                            ; decrement cpp counter
  236:               BNE    nextInit2
  237:  #else  /* defined( __BANKED__) || defined(__LARGE__) */
  238:  
  239:               LDD   _startupData.nofFiniBodies; load number of cpp.
  240:               BEQ   done                     ; if cppcount == 0, goto done
  241:               LDX   _startupData.finiBodies  ; load address of first module to finalize
  242:  nextInit2:
  243:               LDY   2,X+                     ; load address of first module to finalize
  244:               PSHD
  245:               PSHX                           ; save actual address
  246:               JSR   0,Y                      ; call finalize function
  247:               PULX                           ; restore actual address
  248:               PULD                           ; restore cpp counter
  249:               DBNE D, nextInit2
  250:  #endif /* defined( __BANKED__) || defined(__LARGE__) */
  251:  done:;
  252:     }
  253:  }
  254:  #endif
  255:  
  256:  
  257:  #include "non_bank.sgm"
  258:  
  259:  #pragma MESSAGE DISABLE C12053 /* Stack-pointer change not in debugging-information */
  260:  #pragma NO_FRAME
  261:  #pragma NO_ENTRY
  262:  #pragma NO_EXIT
  263:  
  264:  #ifdef __cplusplus
  265:    extern "C"
  266:  #endif
  267:  
  268:  /* The function _Startup must be called in order to initialize global variables and to call main */
  269:  /* You can adapt this function or call it from your startup code to implement a different startup */
  270:  /* functionality. */
  271:  
  272:  /* You should also setup the needed IO registers as WINDEF (HC12A4 only) or the COP registers to run */
  273:  /* on hardware */
  274:  
  275:  /* to set the reset vector several ways are possible : */
  276:  /* 1. define the function with "interrupt 0" as done below in the first case */
  277:  /* 2. add the following line to your prm file : VECTOR ADDRESS 0xfffe _Startup */
  278:  /* of course, even more posibilities exists */
  279:  /* the reset vector must be set so that the application has a defined entry point */
  280:  
  281:  #define STARTUP_FLAGS_NOT_INIT_SP   (1<<1)
  282:  
  283:  #if defined(__SET_RESET_VECTOR__)
  284:  void __interrupt 0 _Startup(void) {
  285:  #else
  286:  void _Startup(void) {
*** EVALUATION ***

Function: _Startup
Source  : \\psf\Home\Documents\HSE\Vorlesungen\Echtzeitsysteme\Examples\CAN\HAL-Target\Start12.c
Options : -Cc -D_HCS12 -D__NO_FLOAT__ -D_HCS12_SERIALMON -Env"GENPATH=\\psf\Home\Documents\HSE\Vorlesungen\Echtzeitsysteme\Examples\CAN\IDE-Target;\\psf\Home\Documents\HSE\Vorlesungen\Echtzeitsysteme\Examples\CAN\IDE-Target\bin;\\psf\Home\Documents\HSE\Vorlesungen\Echtzeitsysteme\Examples\CAN\IDE-Target\prm;\\psf\Home\Documents\HSE\Vorlesungen\Echtzeitsysteme\Examples\CAN\IDE-Target\cmd;\\psf\Home\Documents\HSE\Vorlesungen\Echtzeitsysteme\Examples\CAN\IDE-Target\Sources;C:\Programme\Freescale\CodeWarrior for S12(X) V5.0\lib\HC12c\lib;C:\Programme\Freescale\CodeWarrior for S12(X) V5.0\lib\HC12c\src;\\psf\Home\Documents\HSE\Vorlesungen\Echtzeitsysteme\Examples\CAN\HAL-Target;\\psf\Home\Documents\HSE\Vorlesungen\Echtzeitsysteme\Examples\CAN\Application;C:\Programme\Freescale\CodeWarrior for S12(X) V5.0\lib\HC12c\include" -Env"LIBPATH=C:\Programme\Freescale\CodeWarrior for S12(X) V5.0\lib\HC12c\include" -EnvOBJPATH=\\psf\Home\Documents\HSE\Vorlesungen\Echtzeitsysteme\Examples\CAN\IDE-Target\bin -EnvTEXTPATH=\\psf\Home\Documents\HSE\Vorlesungen\Echtzeitsysteme\Examples\CAN\IDE-Target\bin -Lasm=%n.lst -Ms -ObjN=\\psf\Home\Documents\HSE\Vorlesungen\Echtzeitsysteme\Examples\CAN\IDE-Target\can-example_Data\Monitor\ObjectCode\Start12.c.o -WmsgSd12053

  287:  #endif
  288:  /*  purpose:    1)  initialize the stack
  289:                  2)  initialize the RAM, copy down init data etc (Init)
  290:                  3)  call main;
  291:      parameters: NONE
  292:      called from: _PRESTART-code generated by the Linker 
  293:                   or directly referenced by the reset vector */
  294:    for(;;) { /* forever: initialize the program; call the root-procedure */
  295:        if (!(_startupData.flags&STARTUP_FLAGS_NOT_INIT_SP)) {
  0000 1e00000203   [5]     BRSET _startupData,#2,*+8 ;abs = 0008
  296:          /* initialize the stack pointer */
  297:          INIT_SP_FROM_STARTUP_DESC(); /*lint !e522 asm code */ /* HLI macro definition in hidef.h */
  0005 cf0000       [2]     LDS   #__SEG_END_SSTACK
  298:        }
  299:        /* Here user defined code could be inserted, the stack could be used */
  300:  #if defined(_DO_DISABLE_COP_)
  301:        _DISABLE_COP();
  302:  #endif 
  303:  
  304:        /* Example : Set up WinDef Register to allow Paging */
  305:  #ifdef HC812A4 /* HC12 A4 derivative needs WINDEF to configure which pages are available */
  306:  #if  (__ENABLE_EPAGE__ != 0 ||  __ENABLE_DPAGE__ != 0 || __ENABLE_PPAGE__ != 0)
  307:        WINDEF= __ENABLE_EPAGE__ | __ENABLE_DPAGE__  | __ENABLE_PPAGE__;
  308:  #endif
  309:  #endif
  310:        Init(); /* zero out, copy down, call constructors */
  0008 0700         [4]     BSR   Init
  311:        /* Here user defined code could be inserted, all global variables are initilized */
  312:  #if defined(_DO_ENABLE_COP_)
  313:        _ENABLE_COP(1);
  314:  #endif
  315:  
  316:        /* call main() */
  317:        (*_startupData.main)();
  000a 15fb0000     [7]     JSR   [_startupData:1,PCR]
  000e 20f0         [3]     BRA   *-14 ;abs = 0000
  318:  
  319:        /* call destructors. Only done when this file is compiled as C++ and for the ELF object file format */
  320:        /* the HIWARE object file format does not support this */
  321:  #if defined( __ELF_OBJECT_FILE_FORMAT__) && defined(__cplusplus )
  322:        Fini();
  323:  #endif
  324:  
  325:     } /* end loop forever */
  326:  }
  327:  
